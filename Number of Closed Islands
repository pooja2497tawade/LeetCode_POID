class Solution {
    void dfs(int row,int col,int[][] grid)
    {
        grid[row][col]=1;

        int[] delrow={-1,0,+1,0};
        int[] delcol={0,+1,0,-1};
        int n=grid.length;
        int m=grid[0].length;
        for(int i=0;i<4;i++)
        {
            int nrow=row+delrow[i];
            int ncol=col+delcol[i];
            if(nrow>=0 && nrow<n && ncol>=0&& ncol<m && grid[nrow][ncol]==0)
            {
                dfs(nrow,ncol,grid);
            }
        }
        

    }
    public int closedIsland(int[][] grid) {

        int n=grid.length;
        int m=grid[0].length;

        //int[] vis = new int[n*m];
        //boundary can not be consider in the closed insland so we make as 1
       for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if((i*j==0 || i==n-1 || j==m-1) && (grid[i][j]==0))
                    dfs(i, j, grid);
            }
        }

        //we ireated the grid check if 0 and top,left,right,bottom are water then count
        int count=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==0)
                {
                    dfs(i,j,grid);
                    count++;
                }
            }
        }
        return count;

        
    }
}
