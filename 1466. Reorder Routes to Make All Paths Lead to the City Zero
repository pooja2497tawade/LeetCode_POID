class Solution {
    //dfs approches
    public int minReorder(int n, int[][] connections) {
        
       List<List<Integer>> al = new ArrayList<>();
        for(int i = 0; i < n; ++i) 
            al.add(new ArrayList<>());
        for (var c : connections) {
            al.get(c[0]).add(c[1]);
            al.get(c[1]).add(-c[0]);
        }
        boolean[] visited= new boolean[n];
        return dfs(al,visited,0);
    }
    static int dfs(List<List<Integer>> al, boolean[] visited, int from) {
        int count = 0;
        visited[from] = true;
        for (var to : al.get(from))
            if (!visited[Math.abs(to)])
                count += dfs(al, visited, Math.abs(to)) + (to > 0 ? 1 : 0);
        return count;   
    }
}
